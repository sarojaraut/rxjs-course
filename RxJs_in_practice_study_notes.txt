/*
quick notes : 

o = {a:1,b:2,c:3}
Object.values(o) = [1, 2, 3]
*/

RxJs stands for reactive extension for JS and it's a library that helps combining streams in a mantainable way

// This getting triggered on any click on the page
document.addEventListner('click' evt =>{console.log(evt)})

let counter = 0;
setInterval(
    () => {
        console.log(counter);
        counter ++:
    }, 1000)

// above block keep emiting stream of numbers at every second

setTimeout(
    () =>{
        console.log("Finished");
    }, 3000 )



// Prints after three second, this is also a stream which prints only once. This can be tought of if this as an backrend request via AJAX which returns response after three seconds

First example is a never completing stream, second one is completed after three seconds

These are concepts of stream, can they ba completed, if yes then when

If want behaviour like start the stream after three seconds of users click
then we can nest them together e.g.

document.addEventListner('click' evt =>{
    console.log(evt);
    setTimeout(() =>{
        console.log("Finished");
        let counter = 0;
        setInterval(() => {
                console.log(counter);
                counter ++:
            }, 1000)

    }, 3000 )
    
})

This is referred as call back hell.
Notice this way of combining streams is not very convinient and hard to read and comprehend

## Observable :

const interval$ = interval(1000); // $ at the end is a convention for intervals
// above line is just a blue print it's not going to emit stream untill subscribed
interval$.subscribe(val => console.log('stream-1', val)); //it start printing 0, 1, 2, 3 ... at interval of one second
interval$.subscribe(val => console.log('stream-2', val)); //we can create a new stream just subscribing to the same observable for second time

now we have two independant streams each emiting number at every second.

now let's say we want to start emit numbers after a 3 sec delay

const timer$ = timer(3000, 1000); // $ at the end is a convention for intervals

const click$ = fromEvent(document, 'click');

click$.subscribe(evt => console.log(evt))

### Errors, completion and subscription

subscribe can take few arguments: 1. value callback, 2. error handler 

const click$ = fromEvent(document, 'click');
click$.subscribe(
    evt => console.log(evt),
    err =>  console.log(err),
    () => console.log(completed)
)





npm run server : to start dev server
npm start

http://localhost:9000/api/courses


If we call browser fetch api it will return a promise. Promise is very different from observable, promise gets executed immediately once we define it. But observables gets triggered in response to a subscription

fetch ('/api/courses');

create an observable
ngOnInit() {
    const http$ = new Observable( observer => {
        // observer.next();
        // observer.complete();
        // observer.error;
        fetch ('/api/courses')
            .then(response =>{
                return response.json();  //
            })
            // success
            .then(body => {
                observer.next(body);
                observer.complete();
            })
            // If any error happens
            .catch( err =>{
                observer.error(err)
        })
    
    })

    http$.subscribe(
        courses => console.log(courses),
        noop, // no operation
        () => console.log("completed")
    ).

Why do we want to convert the API calls to use observable pattern, because we can apply new set of RxJS operators to combine streams of values.API


    open url : http://localhost:4200/about and check the console

the above function gets called only if a subscription happens



